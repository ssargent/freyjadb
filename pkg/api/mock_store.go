// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ssargent/freyjadb/pkg/api (interfaces: IKVStore)
//
// Generated by this command:
//
//	mockgen -destination=./mock_store.go -package=api . IKVStore
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	store "github.com/ssargent/freyjadb/pkg/store"
	gomock "go.uber.org/mock/gomock"
)

// MockIKVStore is a mock of IKVStore interface.
type MockIKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockIKVStoreMockRecorder
	isgomock struct{}
}

// MockIKVStoreMockRecorder is the mock recorder for MockIKVStore.
type MockIKVStoreMockRecorder struct {
	mock *MockIKVStore
}

// NewMockIKVStore creates a new mock instance.
func NewMockIKVStore(ctrl *gomock.Controller) *MockIKVStore {
	mock := &MockIKVStore{ctrl: ctrl}
	mock.recorder = &MockIKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKVStore) EXPECT() *MockIKVStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIKVStore) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIKVStoreMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIKVStore)(nil).Delete), key)
}

// DeleteRelationship mocks base method.
func (m *MockIKVStore) DeleteRelationship(fromKey, toKey, relation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelationship", fromKey, toKey, relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelationship indicates an expected call of DeleteRelationship.
func (mr *MockIKVStoreMockRecorder) DeleteRelationship(fromKey, toKey, relation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationship", reflect.TypeOf((*MockIKVStore)(nil).DeleteRelationship), fromKey, toKey, relation)
}

// Explain mocks base method.
func (m *MockIKVStore) Explain(arg0 context.Context, arg1 store.ExplainOptions) (*store.ExplainResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Explain", arg0, arg1)
	ret0, _ := ret[0].(*store.ExplainResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Explain indicates an expected call of Explain.
func (mr *MockIKVStoreMockRecorder) Explain(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockIKVStore)(nil).Explain), arg0, arg1)
}

// Get mocks base method.
func (m *MockIKVStore) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIKVStoreMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIKVStore)(nil).Get), key)
}

// GetRelationships mocks base method.
func (m *MockIKVStore) GetRelationships(arg0 store.RelationshipQuery) ([]store.RelationshipResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationships", arg0)
	ret0, _ := ret[0].([]store.RelationshipResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationships indicates an expected call of GetRelationships.
func (mr *MockIKVStoreMockRecorder) GetRelationships(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationships", reflect.TypeOf((*MockIKVStore)(nil).GetRelationships), arg0)
}

// ListKeys mocks base method.
func (m *MockIKVStore) ListKeys(prefix []byte) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockIKVStoreMockRecorder) ListKeys(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockIKVStore)(nil).ListKeys), prefix)
}

// Put mocks base method.
func (m *MockIKVStore) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockIKVStoreMockRecorder) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIKVStore)(nil).Put), key, value)
}

// PutRelationship mocks base method.
func (m *MockIKVStore) PutRelationship(fromKey, toKey, relation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRelationship", fromKey, toKey, relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRelationship indicates an expected call of PutRelationship.
func (mr *MockIKVStoreMockRecorder) PutRelationship(fromKey, toKey, relation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRelationship", reflect.TypeOf((*MockIKVStore)(nil).PutRelationship), fromKey, toKey, relation)
}

// Stats mocks base method.
func (m *MockIKVStore) Stats() *store.StoreStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(*store.StoreStats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockIKVStoreMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockIKVStore)(nil).Stats))
}
